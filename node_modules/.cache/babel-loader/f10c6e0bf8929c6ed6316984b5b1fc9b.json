{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\lynn.kim\\\\Documents\\\\Code Lab\\\\lightsout-game-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\lynn.kim\\\\Documents\\\\Code Lab\\\\lightsout-game-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\lynn.kim\\\\Documents\\\\Code Lab\\\\lightsout-game-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\lynn.kim\\\\Documents\\\\Code Lab\\\\lightsout-game-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\lynn.kim\\\\Documents\\\\Code Lab\\\\lightsout-game-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\lynn.kim\\\\Documents\\\\Code Lab\\\\lightsout-game-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\lynn.kim\\\\Documents\\\\Code Lab\\\\lightsout-game-react\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n  function Board(props) {\n    var _this;\n    _classCallCheck(this, Board);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard() // muss ich hier kein binding machen?\n    };\n    // TODO: set initial state\n    return _this;\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n      // TODO: create array-of-arrays of true/false values\n      // wichtig hier in func: nested loop- loop in loop\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n        for (var x = 0; x < this.props.ncols; x++) {\n          row.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n        board.push(row);\n      }\n      return board;\n    } /** handle changing a cell: update board & determine if winner */\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n        ncols = _this$props.ncols,\n        nrows = _this$props.nrows;\n      var board = this.state.board;\n      var _coord$split$map = coord.split(\"-\").map(Number),\n        _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n        y = _coord$split$map2[0],\n        x = _coord$split$map2[1];\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      }\n\n      // TODO: flip this cell and the cells around it\n\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      // this.setState({ board, hasWon });\n    } /** Render game board or winning message. */\n  }, {\n    key: \"render\",\n    value: function render() {\n      // if the game is won, just show a winning msg & render nothing else\n      // TODO\n\n      // make table board\n      // TODO\n      // nochmal nested array & loop\n      var tblBoard = [];\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n        for (var x = 0; x < this.props.ncols; x++) {\n          var coord = \"\".concat(y, \" - \").concat(x);\n          row.push( /*#__PURE__*/React.createElement(Cell, {\n            key: coord,\n            isLit: this.state.board[y][x],\n            flipCellsAround: this.flipCellsAround(coord),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 11\n            }\n          })); //hier statt this als parameter in flipcell- wegen arrow func\n        }\n        // console.log(row);\n        tblBoard.push( /*#__PURE__*/React.createElement(\"tr\", {\n          key: y,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 21\n          }\n        }, row)); //in table sollte row angezeigt werden.\n      }\n\n      return /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 9\n        }\n      }, tblBoard));\n    }\n  }]);\n  return Board;\n}(Component);\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"names":["React","Component","Cell","Board","_Component","_inherits","props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","state","hasWon","board","createBoard","_createClass","key","value","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","flipCellsAround","coord","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","_slicedToArray","flipCell","render","tblBoard","concat","createElement","isLit","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","defaultProps"],"sources":["C:/Users/lynn.kim/Documents/Code Lab/lightsout-game-react/src/Board.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25,\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard(), // muss ich hier kein binding machen?\n    };\n    // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    // wichtig hier in func: nested loop- loop in loop\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    // this.setState({ board, hasWon });\n  }\n\n  /** Render game board or winning message. */\n\n  render() {\n    // if the game is won, just show a winning msg & render nothing else\n    // TODO\n\n    // make table board\n    // TODO\n    // nochmal nested array & loop\n    let tblBoard = [];\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        let coord = `${y} - ${x}`;\n        row.push(\n          <Cell\n            key={coord}\n            isLit={this.state.board[y][x]}\n            flipCellsAround={this.flipCellsAround(coord)}\n          />,\n        ); //hier statt this als parameter in flipcell- wegen arrow func\n      }\n      // console.log(row);\n      tblBoard.push(<tr key={y}>{row}</tr>); //in table sollte row angezeigt werden.\n    }\n    return (\n      <table className='Board'>\n        <tbody>{tblBoard}</tbody>\n      </table>\n    );\n  }\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}