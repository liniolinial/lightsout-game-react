{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\lynn.kim\\\\Documents\\\\Code Lab\\\\lightsout-game-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\lynn.kim\\\\Documents\\\\Code Lab\\\\lightsout-game-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\lynn.kim\\\\Documents\\\\Code Lab\\\\lightsout-game-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\lynn.kim\\\\Documents\\\\Code Lab\\\\lightsout-game-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\lynn.kim\\\\Documents\\\\Code Lab\\\\lightsout-game-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\lynn.kim\\\\Documents\\\\Code Lab\\\\lightsout-game-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n  function Board(props) {\n    _classCallCheck(this, Board);\n    return _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n      // TODO: create array-of-arrays of true/false values\n      return board;\n    } /** handle changing a cell: update board & determine if winner */\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n        ncols = _this$props.ncols,\n        nrows = _this$props.nrows;\n      var board = this.state.board;\n      var _coord$split$map = coord.split(\"-\").map(Number),\n        _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n        y = _coord$split$map2[0],\n        x = _coord$split$map2[1];\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      }\n\n      // TODO: flip this cell and the cells around it\n\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    } /** Render game board or winning message. */\n  }, {\n    key: \"render\",\n    value: function render() {\n      // if the game is won, just show a winning msg & render nothing else\n\n      // TODO\n\n      // make table board\n      table;\n      tbody;\n      throw Cell;\n      cell;\n      cell;\n      // TODO\n    }\n  }]);\n  return Board;\n}(Component);\nexport default Board;","map":{"version":3,"names":["React","Component","Cell","Board","_Component","_inherits","props","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","_createClass","key","value","createBoard","board","flipCellsAround","coord","_this$props","ncols","nrows","state","_coord$split$map","split","map","Number","_coord$split$map2","_slicedToArray","y","x","flipCell","setState","hasWon","render","table","tbody","cell"],"sources":["C:/Users/lynn.kim/Documents/Code Lab/lightsout-game-react/src/Board.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    this.setState({ board, hasWon });\n  }\n\n  /** Render game board or winning message. */\n\n  render() {\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n    table;\n    tbody;\n    throw Cell;\n    cell;\n    cell;\n    // TODO\n  }\n}\n\nexport default Board;\n"],"mappings":";;;;;;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAO,aAAa;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAxBA,IA0BMC,KAAK,0BAAAC,UAAA;EAAAC,SAAA,CAAAF,KAAA,EAAAC,UAAA;EACT,SAAAD,MAAYG,KAAK,EAAE;IAAAC,eAAA,OAAAJ,KAAA;IAAA,OAAAK,0BAAA,OAAAC,eAAA,CAAAN,KAAA,EAAAO,IAAA,OACXJ,KAAK,IAEX;EACF;;EAEA;EAAAK,YAAA,CAAAR,KAAA;IAAAS,GAAA;IAAAC,KAAA,WAAAC,YAAA,EAEc;MACZ,IAAIC,KAAK,GAAG,EAAE;MACd;MACA,OAAOA,KAAK;IACd,CAAC,CAED;EAAA;IAAAH,GAAA;IAAAC,KAAA,WAAAG,gBAEgBC,KAAK,EAAE;MAAA,IAAAC,WAAA,GACE,IAAI,CAACZ,KAAK;QAA3Ba,KAAK,GAAAD,WAAA,CAALC,KAAK;QAAEC,KAAK,GAAAF,WAAA,CAALE,KAAK;MAClB,IAAIL,KAAK,GAAG,IAAI,CAACM,KAAK,CAACN,KAAK;MAAC,IAAAO,gBAAA,GAChBL,KAAK,CAACM,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;QAAAC,iBAAA,GAAAC,cAAA,CAAAL,gBAAA;QAApCM,CAAC,GAAAF,iBAAA;QAAEG,CAAC,GAAAH,iBAAA;MAET,SAASI,QAAQA,CAACF,CAAC,EAAEC,CAAC,EAAE;QACtB;;QAEA,IAAIA,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGV,KAAK,IAAIS,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGR,KAAK,EAAE;UAC9CL,KAAK,CAACa,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG,CAACd,KAAK,CAACa,CAAC,CAAC,CAACC,CAAC,CAAC;QAC5B;MACF;;MAEA;;MAEA;MACA;;MAEA,IAAI,CAACE,QAAQ,CAAC;QAAEhB,KAAK,EAALA,KAAK;QAAEiB,MAAM,EAANA;MAAO,CAAC,CAAC;IAClC,CAAC,CAED;EAAA;IAAApB,GAAA;IAAAC,KAAA,WAAAoB,OAAA,EAES;MACP;;MAEA;;MAEA;MACAC,KAAK;MACLC,KAAK;MACL,MAAMjC,IAAI;MACVkC,IAAI;MACJA,IAAI;MACJ;IACF;EAAC;EAAA,OAAAjC,KAAA;AAAA,EApDiBF,SAAS;AAuD7B,eAAeE,KAAK"},"metadata":{},"sourceType":"module"}