{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\lynn.kim\\\\Documents\\\\Code Lab\\\\lightsout-game-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\lynn.kim\\\\Documents\\\\Code Lab\\\\lightsout-game-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\lynn.kim\\\\Documents\\\\Code Lab\\\\lightsout-game-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\lynn.kim\\\\Documents\\\\Code Lab\\\\lightsout-game-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\lynn.kim\\\\Documents\\\\Code Lab\\\\lightsout-game-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\lynn.kim\\\\Documents\\\\Code Lab\\\\lightsout-game-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\lynn.kim\\\\Documents\\\\Code Lab\\\\lightsout-game-react\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\lynn.kim\\\\Documents\\\\Code Lab\\\\lightsout-game-react\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n  function Board(props) {\n    var _this;\n    _classCallCheck(this, Board);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard() // muss ich hier kein binding machen?/ func als props\n    };\n\n    _this.resetBtn = _this.resetBtn.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  _createClass(Board, [{\n    key: \"resetBtn\",\n    value: function resetBtn() {\n      this.setState({\n        hasWon: false,\n        board: this.createBoard()\n      });\n    }\n  }, {\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; //weil hier row auch kommt, das Value wird hier x&y also zwei\n      // wichtig hier in func: nested loop- loop in loop\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n        for (var x = 0; x < this.props.ncols; x++) {\n          row.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n        board.push(row);\n      }\n      return board;\n    }\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      console.log(\"FLIPPING!\", coord);\n      var _this$props = this.props,\n        ncols = _this$props.ncols,\n        nrows = _this$props.nrows; // nochmal .this eindeutiger machen.\n      var board = this.state.board;\n      var _coord$split$map = coord.split(\"-\").map(Number),\n        _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n        y = _coord$split$map2[0],\n        x = _coord$split$map2[1];\n      function flipCell(y, x) {\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      }\n      flipCell(y, x);\n      flipCell(y, x - 1);\n      flipCell(y, x + 1);\n      flipCell(y - 1, x);\n      flipCell(y + 1, x);\n\n      // let hasWon = false; //für hasWon ist das Wert benötigt //aber hier ist hardcoding, also ändere ich das\n      var hasWon = board.every(function (row) {\n        return row.every(function (cell) {\n          return !cell;\n        });\n      }); //=false\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      // warum hier: wenn der Benutzer Board hat, wird diese Message nicht angezeigt.\n      if (this.state.hasWon) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"Board-title\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"winner\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"neon-orange\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }\n        }, \"YOU\"), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"neon-blue\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }\n        }, \"WIN!\")));\n      }\n\n      // nochmal nested array & loop\n      var tblBoard = [];\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n        var _loop = function _loop() {\n          var coord = \"\".concat(y, \"-\").concat(x);\n          row.push( /*#__PURE__*/React.createElement(Cell, {\n            key: coord,\n            isLit: _this2.state.board[y][x],\n            flipCellsAroundMe: function flipCellsAroundMe() {\n              return _this2.flipCellsAround(coord);\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 11\n            }\n          })); //hier statt this als parameter in flipcell- wegen arrow func\n        };\n        for (var x = 0; x < this.props.ncols; x++) {\n          _loop();\n        }\n        // console.log(row);\n        tblBoard.push( /*#__PURE__*/React.createElement(\"tr\", {\n          key: y,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 21\n          }\n        }, row)); //in table sollte row angezeigt werden.\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Game-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Board-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"neon-orange\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }\n      }, \"Lights\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"neon-blue\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }\n      }, \"Out\")), /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }\n      }, tblBoard)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Info-bar\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }\n      }, \"Target\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }\n      }, \"Moves\"), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }\n      }, \"Time\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Intro-game\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }\n      }, \"How to play\"), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }\n      }, \"The game consists of a 5 by 5 grid of lights. When the game starts, a random number or a stored pattern of these lights is switched on. Pressing any of the lights will toggle it and the adjacent lights. The goal of the puzzle is to switch all the lights off, preferably with as few button presses as possible.\"), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.resetBtn,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }\n      }, \"new Game\"))));\n    }\n  }]);\n  return Board;\n}(Component);\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"names":["React","Component","Cell","Board","_Component","_inherits","props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","state","hasWon","board","createBoard","resetBtn","bind","_assertThisInitialized","_createClass","key","value","setState","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","flipCellsAround","coord","console","log","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","_slicedToArray","flipCell","every","cell","render","_this2","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","tblBoard","_loop","concat","isLit","flipCellsAroundMe","onClick","defaultProps"],"sources":["C:/Users/lynn.kim/Documents/Code Lab/lightsout-game-react/src/Board.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25,\n  };\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard(), // muss ich hier kein binding machen?/ func als props\n    };\n    this.resetBtn = this.resetBtn.bind(this);\n  }\n\n  resetBtn() {\n    this.setState({\n      hasWon: false,\n      board: this.createBoard(),\n    });\n  }\n\n  createBoard() {\n    let board = []; //weil hier row auch kommt, das Value wird hier x&y also zwei\n    // wichtig hier in func: nested loop- loop in loop\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  flipCellsAround(coord) {\n    console.log(\"FLIPPING!\", coord);\n    let { ncols, nrows } = this.props; // nochmal .this eindeutiger machen.\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    flipCell(y, x);\n    flipCell(y, x - 1);\n    flipCell(y, x + 1);\n    flipCell(y - 1, x);\n    flipCell(y + 1, x);\n\n    // let hasWon = false; //für hasWon ist das Wert benötigt //aber hier ist hardcoding, also ändere ich das\n    let hasWon = board.every((row) => row.every((cell) => !cell)); //=false\n    this.setState({ board: board, hasWon: hasWon });\n  }\n\n  render() {\n    // warum hier: wenn der Benutzer Board hat, wird diese Message nicht angezeigt.\n    if (this.state.hasWon) {\n      return (\n        <div className='Board-title'>\n          <div className='winner'>\n            <span className='neon-orange'>YOU</span>\n            <span className='neon-blue'>WIN!</span>\n          </div>\n        </div>\n      );\n    }\n\n    // nochmal nested array & loop\n    let tblBoard = [];\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        let coord = `${y}-${x}`;\n        row.push(\n          <Cell\n            key={coord}\n            isLit={this.state.board[y][x]}\n            flipCellsAroundMe={() => this.flipCellsAround(coord)}\n          />,\n        ); //hier statt this als parameter in flipcell- wegen arrow func\n      }\n      // console.log(row);\n      tblBoard.push(<tr key={y}>{row}</tr>); //in table sollte row angezeigt werden.\n    }\n    return (\n      <div>\n        <div className='Game-container'>\n          <div className='Board-title'>\n            <div className='neon-orange'>Lights</div>\n            <div className='neon-blue'>Out</div>\n          </div>\n          <table className='Board'>\n            <tbody>{tblBoard}</tbody>\n          </table>\n          <div className='Info-bar'>\n            <p>Target</p>\n            <p>Moves</p>\n            <p>Time</p>\n          </div>\n          <div className='Intro-game'>\n            <h2>How to play</h2>\n            <p className='text'>\n              The game consists of a 5 by 5 grid of lights. When the game\n              starts, a random number or a stored pattern of these lights is\n              switched on. Pressing any of the lights will toggle it and the\n              adjacent lights. The goal of the puzzle is to switch all the\n              lights off, preferably with as few button presses as possible.\n            </p>\n            <button onClick={this.resetBtn}>new Game</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}